
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_each_argument, a as validate_each_keys, b as validate_slots, B as Button, e as element, t as text, c as space, f as attr_dev, g as add_location, h as set_style, j as insert_dev, k as append_dev, l as detach_dev, m as destroy_each, u as update_keyed_each, n as noop, o as empty, p as destroy_block, q as globals, r as create_component, w as mount_component, x as transition_in, y as transition_out, z as destroy_component } from './main-9bdf28d2.js';

const experiences = [
    {
        name: "Berlin 3 Services GmbH",
        location: "Berlin",
        position: "Lead Frontend Engineer",
        from: "Oct 2018",
        to: "Present",
        development_tools: ["VueJS", "React"],
        description: "Lead Developer of the Frontend Application Project. I am responsible for developing large scale frontend app which scales in size, feature and platform. My work involves developing features, plugins/libraries to use in the app and ensuring fast, intuitive and bug free user experience.",
    },
    {
        name: "Hoxro LMS",
        location: "Dhaka",
        position: "Software Engineer",
        from: "July 2017",
        to: "Oct 2018",
        development_tools: ["Angular 4", "NodeJS"],
        description: "Leading Frontend team, creating and managing in-house plugins.",
        description_list: [
            "Utilize expertise on Javascript Stack and Typescript. Especially Angular 4.",
            "Create Frontend project Skeleton, maintaining structure and best practices across the project.",
            "Encourage functional programming with Javascript and implementing FP concept cleverly to improve overall code quality, test-ability and scalability.",
            "Assist team in learning Angular 4, Git, Advanced DOM APIs and fixing critical bugs.",
            "Develop sophisticated Typescript/Javascript libraries to be used in the project.",
            "Developing a lean lightweight and high-performing Frontend App without any third-party plugins.",
        ],
    },
    {
        name: "Unclehub LLC",
        location: "Northern Virginia",
        position: "Full Stack Developer",
        from: "March 2017",
        to: "June 2017",
        development_tools: ["ExpressJS", "Angular 4", "Nodejs", "PostgreSQL", "Heroku", "Amazon PostgreSQL"],
    },
    {
        name: "TuitionStock",
        location: "Dhaka",
        position: "Full Stack Developer",
        from: "December 2016",
        to: "February 2017",
        development_tools: ["ExpressJS", "Angular 2", "Nodejs", "MongoDB", "Amazon EC2"]
    },
];

/* src/experience/experience-card.svelte generated by Svelte v3.23.2 */
const file = "src/experience/experience-card.svelte";

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i];
	child_ctx[5] = i;
	return child_ctx;
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[0] = list[i];
	return child_ctx;
}

// (29:10) {:else}
function create_else_block(ctx) {
	let div;
	let t_value = ", " + /*devt*/ ctx[3] + "";
	let t;

	const block = {
		c: function create() {
			div = element("div");
			t = text(t_value);
			attr_dev(div, "class", "pr-1 font-light");
			add_location(div, file, 29, 12, 1006);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(29:10) {:else}",
		ctx
	});

	return block;
}

// (27:10) {#if i == 0}
function create_if_block_1(ctx) {
	let div;
	let t_value = /*devt*/ ctx[3] + "";
	let t;

	const block = {
		c: function create() {
			div = element("div");
			t = text(t_value);
			attr_dev(div, "class", "pr-1 font-semibold");
			add_location(div, file, 27, 12, 931);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(27:10) {#if i == 0}",
		ctx
	});

	return block;
}

// (26:8) {#each expr.development_tools as devt, i}
function create_each_block_1(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*i*/ ctx[5] == 0) return create_if_block_1;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if_block.p(ctx, dirty);
		},
		d: function destroy(detaching) {
			if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(26:8) {#each expr.development_tools as devt, i}",
		ctx
	});

	return block;
}

// (34:6) {#if expr.description}
function create_if_block(ctx) {
	let div;
	let t_value = /*expr*/ ctx[0].description + "";
	let t;

	const block = {
		c: function create() {
			div = element("div");
			t = text(t_value);
			attr_dev(div, "class", "pr-1 font-light text-gray-700 mt-2");
			add_location(div, file, 34, 8, 1137);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(34:6) {#if expr.description}",
		ctx
	});

	return block;
}

// (17:2) {#each experiences as expr (expr.name)}
function create_each_block(key_1, ctx) {
	let div1;
	let h2;
	let t0_value = /*expr*/ ctx[0].name + "";
	let t0;
	let t1;
	let h30;
	let t2_value = /*expr*/ ctx[0].location + "";
	let t2;
	let t3;
	let h31;
	let t4_value = /*expr*/ ctx[0].position + "";
	let t4;
	let t5;
	let h32;
	let t6_value = /*expr*/ ctx[0].from + "";
	let t6;
	let t7;
	let t8_value = /*expr*/ ctx[0].to + "";
	let t8;
	let t9;
	let div0;
	let t10;
	let t11;
	let each_value_1 = /*expr*/ ctx[0].development_tools;
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	let if_block = /*expr*/ ctx[0].description && create_if_block(ctx);

	const block = {
		key: key_1,
		first: null,
		c: function create() {
			div1 = element("div");
			h2 = element("h2");
			t0 = text(t0_value);
			t1 = space();
			h30 = element("h3");
			t2 = text(t2_value);
			t3 = space();
			h31 = element("h3");
			t4 = text(t4_value);
			t5 = space();
			h32 = element("h3");
			t6 = text(t6_value);
			t7 = text(" - ");
			t8 = text(t8_value);
			t9 = space();
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t10 = space();
			if (if_block) if_block.c();
			t11 = space();
			attr_dev(h2, "class", "text-gray-700 font-semibold");
			add_location(h2, file, 18, 6, 458);
			attr_dev(h30, "class", "text-cyan-400 font-hairline");
			add_location(h30, file, 19, 6, 521);
			attr_dev(h31, "class", "text-gray-700 ");
			add_location(h31, file, 20, 6, 588);
			attr_dev(h32, "class", "text-gray-500 font-light");
			add_location(h32, file, 21, 6, 642);
			attr_dev(div0, "class", "flex flex-row overflow-hidden");
			set_style(div0, "max-width", "100%");
			set_style(div0, "text-overflow", "ellipsis");
			set_style(div0, "white-space", "nowrap");
			add_location(div0, file, 22, 6, 714);
			attr_dev(div1, "class", "p-4 px-5 shadow-sm my-1 rounded-lg");
			add_location(div1, file, 17, 4, 403);
			this.first = div1;
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, h2);
			append_dev(h2, t0);
			append_dev(div1, t1);
			append_dev(div1, h30);
			append_dev(h30, t2);
			append_dev(div1, t3);
			append_dev(div1, h31);
			append_dev(h31, t4);
			append_dev(div1, t5);
			append_dev(div1, h32);
			append_dev(h32, t6);
			append_dev(h32, t7);
			append_dev(h32, t8);
			append_dev(div1, t9);
			append_dev(div1, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}

			append_dev(div1, t10);
			if (if_block) if_block.m(div1, null);
			append_dev(div1, t11);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*experiences*/ 0) {
				each_value_1 = /*expr*/ ctx[0].development_tools;
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div0, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}

			if (/*expr*/ ctx[0].description) if_block.p(ctx, dirty);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			destroy_each(each_blocks, detaching);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(17:2) {#each experiences as expr (expr.name)}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let each_value = experiences;
	validate_each_argument(each_value);
	const get_key = ctx => /*expr*/ ctx[0].name;
	validate_each_keys(ctx, each_value, get_each_context, get_key);

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	const block = {
		c: function create() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(div, "class", "flex flex-col py-4 mt-6 text-lg text-gray-600 experience w-full svelte-1a64yt2");
			add_location(div, file, 15, 0, 279);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*experiences*/ 0) {
				const each_value = experiences;
				validate_each_argument(each_value);
				validate_each_keys(ctx, each_value, get_each_context, get_key);
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div, destroy_block, create_each_block, null, get_each_context);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Experience_card> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Experience_card", $$slots, []);
	$$self.$capture_state = () => ({ Button, experiences });
	return [];
}

class Experience_card extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Experience_card",
			options,
			id: create_fragment.name
		});
	}
}

const projects = [
    {
        title: "Media server",
        description: "Media server built with ReactJS, NodeJS and MongoDB",
        dev_tools: "ReactJS, NodeJS, MongoDB",
        github_repo: "https://github.com/nomanHasan/media-server"
    },
    {
        title: "Todo API",
        description: "A simple todo API made with NodeJS, ExpressJS and MongoDB. Can be used as a back-end for learning front-end technologies without making a standalone API for that purpose.",
        dev_tools: "Node, Express, Mongo",
        github_repo: "https://github.com/nomanHasan/todo-api"
    },
    {
        title: "Todo Ngrx App",
        description: "This app is made with NgRx. This is a demo app made for educational purpose to test out the popular State management library of Angular",
        dev_tools: "Angular, NgRx",
        github_repo: "https://github.com/nomanHasan/todoapp-angular-ngrx"
    },
    {
        title: "namda",
        description: "Typescript utility Library inspired by Functional Programming",
        dev_tools: "Typescript",
        github_repo: "https://github.com/nomanHasan/namda"
    },
    {
        title: "NLP-BASED CONVERSATIONAL AGENT",
        description: "This is a NLP-Based Conversational Agent that receives questions from the User and then answers the question by Natural Language Processing based Analysis.",
        dev_tools: "Python, NLTK, Stanford CoreNLP, MongoDB",
        github_repo: "https://github.com/nomanHasan/NLP-Based-WIKI-Agent",
        images: [
            "darborn.jpg", "jesus.jpg", "kajiw.jpg"
        ]
    },
    {
        title: "FACE RECOGNITION SYSTEM WITH FACE-LOGIN",
        description: "I have developed this software as a part of Software project course at my university. This software can identify faces using Haar feature-based cascade classifiers and can recognize faces using Eigenface Algorithm. It recognizes registered user and let them log into the system.",
        dev_tools: "C++,  OpenCV for Computer vision and QT",
        github_repo: "https://github.com/nomanHasan/FaceRecognition1.2",
        images: [
            "facrec (1).jpg", "facrec (1).png", "facrec (2).jpg"
        ]
    },
    {
        title: "JAVA OPENGL GAME ENGINE",
        description: "This game engine is built with a game called – “Builder’s Guild”. A 3D Open world, Sandbox game with the feature of crafting and building game objects.",
        dev_tools: "Java, LWJGL library  with  modern OpenGL",
        github_repo: "https://github.com/nomanHasan/LWJGLGameEngine",
        images: [
            "batinforest (1).jpg", "batinforest (1).png", "batinforest (2).jpg", "batinforest (3).jpg"
        ]
    }
];

/* src/projects/projects.svelte generated by Svelte v3.23.2 */
const file$1 = "src/projects/projects.svelte";

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[0] = list[i];
	return child_ctx;
}

// (23:2) {#each projects as proj (proj.title)}
function create_each_block$1(key_1, ctx) {
	let div;
	let h2;
	let t0_value = /*proj*/ ctx[0].title + "";
	let t0;
	let t1;
	let h30;
	let t2_value = /*proj*/ ctx[0].description + "";
	let t2;
	let t3;
	let h31;
	let t4_value = /*proj*/ ctx[0].dev_tools + "";
	let t4;
	let t5;
	let h32;
	let a;
	let t6_value = /*proj*/ ctx[0].github_repo + "";
	let t6;
	let a_href_value;
	let t7;

	const block = {
		key: key_1,
		first: null,
		c: function create() {
			div = element("div");
			h2 = element("h2");
			t0 = text(t0_value);
			t1 = space();
			h30 = element("h3");
			t2 = text(t2_value);
			t3 = space();
			h31 = element("h3");
			t4 = text(t4_value);
			t5 = space();
			h32 = element("h3");
			a = element("a");
			t6 = text(t6_value);
			t7 = space();
			attr_dev(h2, "class", "py-1 text-gray-700 font-semibold");
			add_location(h2, file$1, 24, 6, 552);
			attr_dev(h30, "class", "py-1 text-gray-600 font-light");
			add_location(h30, file$1, 25, 6, 621);
			attr_dev(h31, "class", "py-1 text-gray-700 ");
			add_location(h31, file$1, 26, 6, 693);
			attr_dev(a, "href", a_href_value = /*proj*/ ctx[0].github_repo);
			add_location(a, file$1, 28, 8, 828);
			attr_dev(h32, "class", "py-1 text-gray-500 font-light text-sm hover:underline");
			add_location(h32, file$1, 27, 6, 753);
			attr_dev(div, "class", "max-w-100 p-4 px-5 shadow-sm project rounded-lg  svelte-od01vd");
			add_location(div, file$1, 23, 4, 483);
			this.first = div;
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, h2);
			append_dev(h2, t0);
			append_dev(div, t1);
			append_dev(div, h30);
			append_dev(h30, t2);
			append_dev(div, t3);
			append_dev(div, h31);
			append_dev(h31, t4);
			append_dev(div, t5);
			append_dev(div, h32);
			append_dev(h32, a);
			append_dev(a, t6);
			append_dev(div, t7);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$1.name,
		type: "each",
		source: "(23:2) {#each projects as proj (proj.title)}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let div;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let each_value = projects;
	validate_each_argument(each_value);
	const get_key = ctx => /*proj*/ ctx[0].title;
	validate_each_keys(ctx, each_value, get_each_context$1, get_key);

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context$1(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block$1(key, child_ctx));
	}

	const block = {
		c: function create() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(div, "class", "flex flex-row py-4 mt-6 text-lg text-gray-600 projects w-full svelte-od01vd");
			add_location(div, file$1, 21, 0, 363);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*projects*/ 0) {
				const each_value = projects;
				validate_each_argument(each_value);
				validate_each_keys(ctx, each_value, get_each_context$1, get_key);
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div, destroy_block, create_each_block$1, null, get_each_context$1);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Projects> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Projects", $$slots, []);
	$$self.$capture_state = () => ({ Button, projects });
	return [];
}

class Projects extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Projects",
			options,
			id: create_fragment$1.name
		});
	}
}

const skills = {
  proficient: {
    languages: [
      'Javascript',
      'Typescript',
      'C#',
      'Bash',
      'Dart',
      'Python',
      'SQL'
    ],
    technologies: [
      'VueJS',
      'ReactJS',
      'Angular',
      'NodeJS',
      'Svelte',
    ],
    databases: [
      'MongoDB',
      'PostgreSQL',
    ]
  },
  familiar: {
    languages: [
      'Java',
      'PHP',
      'C++',
      'Haskell',
      'Perl',
      'Kotlin',
      'C',
    ],
    technologies: [
      'Flutter',
      'Unity Game Engine',
      'ASP.NET',
      '.NET Core',
      'OpenCV',
      'Django',
      'Android',
    ]
  }
};

/* src/skills/skills.svelte generated by Svelte v3.23.2 */

const { console: console_1 } = globals;
const file$2 = "src/skills/skills.svelte";

function get_each_context$2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[0] = list[i];
	child_ctx[2] = i;
	return child_ctx;
}

function get_each_context_1$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[0] = list[i];
	child_ctx[2] = i;
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[0] = list[i];
	child_ctx[2] = i;
	return child_ctx;
}

function get_each_context_3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[0] = list[i];
	child_ctx[2] = i;
	return child_ctx;
}

function get_each_context_4(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[0] = list[i];
	child_ctx[2] = i;
	return child_ctx;
}

// (19:8) {#each skills.proficient.languages as language, i}
function create_each_block_4(ctx) {
	let div;
	let t0_value = /*language*/ ctx[0] + "";
	let t0;
	let t1;

	const block = {
		c: function create() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			attr_dev(div, "class", "m-1 p-2 rounded-md bg-gray-100 cursor-pointer");
			set_style(div, "color", "hsl(0, 0%, " + /*i*/ ctx[2] * 7 + "%)");
			set_style(div, "font-weight", 900 - /*i*/ ctx[2] * 50);
			add_location(div, file$2, 19, 10, 535);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t0);
			append_dev(div, t1);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_4.name,
		type: "each",
		source: "(19:8) {#each skills.proficient.languages as language, i}",
		ctx
	});

	return block;
}

// (31:8) {#each skills.proficient.technologies as language, i}
function create_each_block_3(ctx) {
	let div;
	let t0_value = /*language*/ ctx[0] + "";
	let t0;
	let t1;

	const block = {
		c: function create() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			attr_dev(div, "class", "m-1 p-2 rounded-md bg-gray-100 cursor-pointer");
			set_style(div, "color", "hsl(0, 0%, " + /*i*/ ctx[2] * 7 + "%)");
			set_style(div, "font-weight", 900 - /*i*/ ctx[2] * 70);
			add_location(div, file$2, 31, 10, 948);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t0);
			append_dev(div, t1);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_3.name,
		type: "each",
		source: "(31:8) {#each skills.proficient.technologies as language, i}",
		ctx
	});

	return block;
}

// (43:8) {#each skills.proficient.databases as language, i}
function create_each_block_2(ctx) {
	let div;
	let t0_value = /*language*/ ctx[0] + "";
	let t0;
	let t1;

	const block = {
		c: function create() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			attr_dev(div, "class", "m-1 p-2 rounded-md bg-gray-100 cursor-pointer");
			set_style(div, "color", "hsl(0, 0%, " + /*i*/ ctx[2] * 7 + "%)");
			set_style(div, "font-weight", 900 - /*i*/ ctx[2] * 70);
			add_location(div, file$2, 43, 10, 1355);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t0);
			append_dev(div, t1);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_2.name,
		type: "each",
		source: "(43:8) {#each skills.proficient.databases as language, i}",
		ctx
	});

	return block;
}

// (58:8) {#each skills.familiar.languages as language, i}
function create_each_block_1$1(ctx) {
	let div;
	let t0_value = /*language*/ ctx[0] + "";
	let t0;
	let t1;

	const block = {
		c: function create() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			attr_dev(div, "class", "m-1 p-2 rounded-md bg-gray-100 cursor-pointer");
			set_style(div, "color", "hsl(0, 0%, " + (skills.proficient.languages.length + /*i*/ ctx[2] * 7) + "%)");
			set_style(div, "font-weight", 900 - (skills.proficient.languages.length + /*i*/ ctx[2]) * 50);
			add_location(div, file$2, 58, 10, 1853);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t0);
			append_dev(div, t1);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1$1.name,
		type: "each",
		source: "(58:8) {#each skills.familiar.languages as language, i}",
		ctx
	});

	return block;
}

// (71:8) {#each skills.familiar.technologies as language, i}
function create_each_block$2(ctx) {
	let div;
	let t0_value = /*language*/ ctx[0] + "";
	let t0;
	let t1;

	const block = {
		c: function create() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			attr_dev(div, "class", "m-1 p-2 rounded-md bg-gray-100 cursor-pointer");
			set_style(div, "color", "hsl(0, 0%, " + (skills.proficient.technologies.length + /*i*/ ctx[2]) * 7 + "%)");
			set_style(div, "font-weight", 900 - (skills.proficient.technologies.length + /*i*/ ctx[2]) * 70);
			add_location(div, file$2, 71, 10, 2352);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t0);
			append_dev(div, t1);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$2.name,
		type: "each",
		source: "(71:8) {#each skills.familiar.technologies as language, i}",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let div19;
	let div10;
	let div0;
	let t1;
	let div3;
	let div1;
	let t3;
	let div2;
	let t4;
	let div6;
	let div4;
	let t6;
	let div5;
	let t7;
	let div9;
	let div7;
	let t9;
	let div8;
	let t10;
	let div18;
	let div11;
	let t12;
	let div14;
	let div12;
	let t14;
	let div13;
	let t15;
	let div17;
	let div15;
	let t17;
	let div16;
	let each_value_4 = skills.proficient.languages;
	validate_each_argument(each_value_4);
	let each_blocks_4 = [];

	for (let i = 0; i < each_value_4.length; i += 1) {
		each_blocks_4[i] = create_each_block_4(get_each_context_4(ctx, each_value_4, i));
	}

	let each_value_3 = skills.proficient.technologies;
	validate_each_argument(each_value_3);
	let each_blocks_3 = [];

	for (let i = 0; i < each_value_3.length; i += 1) {
		each_blocks_3[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
	}

	let each_value_2 = skills.proficient.databases;
	validate_each_argument(each_value_2);
	let each_blocks_2 = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks_2[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	let each_value_1 = skills.familiar.languages;
	validate_each_argument(each_value_1);
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks_1[i] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i));
	}

	let each_value = skills.familiar.technologies;
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div19 = element("div");
			div10 = element("div");
			div0 = element("div");
			div0.textContent = "Proficient";
			t1 = space();
			div3 = element("div");
			div1 = element("div");
			div1.textContent = "Language";
			t3 = space();
			div2 = element("div");

			for (let i = 0; i < each_blocks_4.length; i += 1) {
				each_blocks_4[i].c();
			}

			t4 = space();
			div6 = element("div");
			div4 = element("div");
			div4.textContent = "Technologies";
			t6 = space();
			div5 = element("div");

			for (let i = 0; i < each_blocks_3.length; i += 1) {
				each_blocks_3[i].c();
			}

			t7 = space();
			div9 = element("div");
			div7 = element("div");
			div7.textContent = "Databases";
			t9 = space();
			div8 = element("div");

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].c();
			}

			t10 = space();
			div18 = element("div");
			div11 = element("div");
			div11.textContent = "Familiar";
			t12 = space();
			div14 = element("div");
			div12 = element("div");
			div12.textContent = "Language";
			t14 = space();
			div13 = element("div");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t15 = space();
			div17 = element("div");
			div15 = element("div");
			div15.textContent = "Technologies";
			t17 = space();
			div16 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(div0, "class", "text-2xl text-gray-700 font-bold");
			add_location(div0, file$2, 14, 4, 296);
			attr_dev(div1, "class", " py-2");
			add_location(div1, file$2, 16, 6, 388);
			attr_dev(div2, "class", "flex flex-row flex-wrap");
			add_location(div2, file$2, 17, 6, 428);
			attr_dev(div3, "class", "py-4");
			add_location(div3, file$2, 15, 4, 363);
			attr_dev(div4, "class", "py-2");
			add_location(div4, file$2, 28, 6, 795);
			attr_dev(div5, "class", "flex flex-row flex-wrap");
			add_location(div5, file$2, 29, 6, 838);
			attr_dev(div6, "class", "py-4");
			add_location(div6, file$2, 27, 4, 770);
			attr_dev(div7, "class", " py-2");
			add_location(div7, file$2, 40, 6, 1207);
			attr_dev(div8, "class", "flex flex-row flex-wrap");
			add_location(div8, file$2, 41, 6, 1248);
			attr_dev(div9, "class", "py-4");
			add_location(div9, file$2, 39, 4, 1182);
			attr_dev(div10, "class", "p-4");
			add_location(div10, file$2, 13, 2, 274);
			attr_dev(div11, "class", "text-2xl text-gray-700 font-bold");
			add_location(div11, file$2, 53, 4, 1618);
			attr_dev(div12, "class", " py-2");
			add_location(div12, file$2, 55, 6, 1708);
			attr_dev(div13, "class", "flex flex-row flex-wrap");
			add_location(div13, file$2, 56, 6, 1748);
			attr_dev(div14, "class", "py-4");
			add_location(div14, file$2, 54, 4, 1683);
			attr_dev(div15, "class", " py-2");
			add_location(div15, file$2, 68, 6, 2200);
			attr_dev(div16, "class", "flex flex-row flex-wrap");
			add_location(div16, file$2, 69, 6, 2244);
			attr_dev(div17, "class", "py-4");
			add_location(div17, file$2, 67, 4, 2175);
			attr_dev(div18, "class", "p-4");
			add_location(div18, file$2, 52, 2, 1596);
			attr_dev(div19, "class", "flex flex-col py-4 mt-6 text-gray-600 skills w-full mb-6 svelte-1oqoaym");
			add_location(div19, file$2, 12, 0, 201);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div19, anchor);
			append_dev(div19, div10);
			append_dev(div10, div0);
			append_dev(div10, t1);
			append_dev(div10, div3);
			append_dev(div3, div1);
			append_dev(div3, t3);
			append_dev(div3, div2);

			for (let i = 0; i < each_blocks_4.length; i += 1) {
				each_blocks_4[i].m(div2, null);
			}

			append_dev(div10, t4);
			append_dev(div10, div6);
			append_dev(div6, div4);
			append_dev(div6, t6);
			append_dev(div6, div5);

			for (let i = 0; i < each_blocks_3.length; i += 1) {
				each_blocks_3[i].m(div5, null);
			}

			append_dev(div10, t7);
			append_dev(div10, div9);
			append_dev(div9, div7);
			append_dev(div9, t9);
			append_dev(div9, div8);

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].m(div8, null);
			}

			append_dev(div19, t10);
			append_dev(div19, div18);
			append_dev(div18, div11);
			append_dev(div18, t12);
			append_dev(div18, div14);
			append_dev(div14, div12);
			append_dev(div14, t14);
			append_dev(div14, div13);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(div13, null);
			}

			append_dev(div18, t15);
			append_dev(div18, div17);
			append_dev(div17, div15);
			append_dev(div17, t17);
			append_dev(div17, div16);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div16, null);
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*skills*/ 0) {
				each_value_4 = skills.proficient.languages;
				validate_each_argument(each_value_4);
				let i;

				for (i = 0; i < each_value_4.length; i += 1) {
					const child_ctx = get_each_context_4(ctx, each_value_4, i);

					if (each_blocks_4[i]) {
						each_blocks_4[i].p(child_ctx, dirty);
					} else {
						each_blocks_4[i] = create_each_block_4(child_ctx);
						each_blocks_4[i].c();
						each_blocks_4[i].m(div2, null);
					}
				}

				for (; i < each_blocks_4.length; i += 1) {
					each_blocks_4[i].d(1);
				}

				each_blocks_4.length = each_value_4.length;
			}

			if (dirty & /*skills*/ 0) {
				each_value_3 = skills.proficient.technologies;
				validate_each_argument(each_value_3);
				let i;

				for (i = 0; i < each_value_3.length; i += 1) {
					const child_ctx = get_each_context_3(ctx, each_value_3, i);

					if (each_blocks_3[i]) {
						each_blocks_3[i].p(child_ctx, dirty);
					} else {
						each_blocks_3[i] = create_each_block_3(child_ctx);
						each_blocks_3[i].c();
						each_blocks_3[i].m(div5, null);
					}
				}

				for (; i < each_blocks_3.length; i += 1) {
					each_blocks_3[i].d(1);
				}

				each_blocks_3.length = each_value_3.length;
			}

			if (dirty & /*skills*/ 0) {
				each_value_2 = skills.proficient.databases;
				validate_each_argument(each_value_2);
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks_2[i]) {
						each_blocks_2[i].p(child_ctx, dirty);
					} else {
						each_blocks_2[i] = create_each_block_2(child_ctx);
						each_blocks_2[i].c();
						each_blocks_2[i].m(div8, null);
					}
				}

				for (; i < each_blocks_2.length; i += 1) {
					each_blocks_2[i].d(1);
				}

				each_blocks_2.length = each_value_2.length;
			}

			if (dirty & /*skills*/ 0) {
				each_value_1 = skills.familiar.languages;
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1$1(ctx, each_value_1, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_1$1(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(div13, null);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_1.length;
			}

			if (dirty & /*skills*/ 0) {
				each_value = skills.familiar.technologies;
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$2(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div16, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div19);
			destroy_each(each_blocks_4, detaching);
			destroy_each(each_blocks_3, detaching);
			destroy_each(each_blocks_2, detaching);
			destroy_each(each_blocks_1, detaching);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	console.log(skills);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<Skills> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Skills", $$slots, []);
	$$self.$capture_state = () => ({ Button, skills });
	return [];
}

class Skills extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Skills",
			options,
			id: create_fragment$2.name
		});
	}
}

/* src/other-tabs.svelte generated by Svelte v3.23.2 */
const file$3 = "src/other-tabs.svelte";

function create_fragment$3(ctx) {
	let div;
	let h20;
	let t1;
	let projects;
	let t2;
	let h21;
	let t4;
	let experience;
	let t5;
	let h22;
	let t7;
	let skills;
	let current;
	projects = new Projects({ $$inline: true });
	experience = new Experience_card({ $$inline: true });
	skills = new Skills({ $$inline: true });

	const block = {
		c: function create() {
			div = element("div");
			h20 = element("h2");
			h20.textContent = "Projects";
			t1 = space();
			create_component(projects.$$.fragment);
			t2 = space();
			h21 = element("h2");
			h21.textContent = "Experience";
			t4 = space();
			create_component(experience.$$.fragment);
			t5 = space();
			h22 = element("h2");
			h22.textContent = "Skills";
			t7 = space();
			create_component(skills.$$.fragment);
			attr_dev(h20, "class", "font-hairline text-3xl uppercase text-center text-gray-800 my-3");
			attr_dev(h20, "id", "projects");
			add_location(h20, file$3, 11, 2, 305);
			attr_dev(h21, "class", "font-hairline text-3xl uppercase text-center text-gray-800 my-3");
			attr_dev(h21, "id", "experience");
			add_location(h21, file$3, 18, 2, 464);
			attr_dev(h22, "class", "font-hairline text-3xl uppercase text-center text-gray-800 my-3");
			attr_dev(h22, "id", "skills");
			add_location(h22, file$3, 24, 2, 607);
			attr_dev(div, "class", "flex flex-col tabs lg:overflow-y-auto h-full w-full svelte-al75oc");
			add_location(div, file$3, 10, 0, 237);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, h20);
			append_dev(div, t1);
			mount_component(projects, div, null);
			append_dev(div, t2);
			append_dev(div, h21);
			append_dev(div, t4);
			mount_component(experience, div, null);
			append_dev(div, t5);
			append_dev(div, h22);
			append_dev(div, t7);
			mount_component(skills, div, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(projects.$$.fragment, local);
			transition_in(experience.$$.fragment, local);
			transition_in(skills.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(projects.$$.fragment, local);
			transition_out(experience.$$.fragment, local);
			transition_out(skills.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(projects);
			destroy_component(experience);
			destroy_component(skills);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props, $$invalidate) {
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Other_tabs> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Other_tabs", $$slots, []);
	$$self.$capture_state = () => ({ Experience: Experience_card, Projects, Skills });
	return [];
}

class Other_tabs extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$3, create_fragment$3, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Other_tabs",
			options,
			id: create_fragment$3.name
		});
	}
}

export default Other_tabs;
//# sourceMappingURL=other-tabs-06caa31d.js.map
